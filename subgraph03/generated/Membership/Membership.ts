// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MemberRegistered extends ethereum.Event {
  get params(): MemberRegistered__Params {
    return new MemberRegistered__Params(this);
  }
}

export class MemberRegistered__Params {
  _event: MemberRegistered;

  constructor(event: MemberRegistered) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MemberUnregistered extends ethereum.Event {
  get params(): MemberUnregistered__Params {
    return new MemberUnregistered__Params(this);
  }
}

export class MemberUnregistered__Params {
  _event: MemberUnregistered;

  constructor(event: MemberUnregistered) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Membership extends ethereum.SmartContract {
  static bind(address: Address): Membership {
    return new Membership("Membership", address);
  }

  getMember(_address: Address): string {
    let result = super.call("getMember", "getMember(address):(string)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toString();
  }

  try_getMember(_address: Address): ethereum.CallResult<string> {
    let result = super.tryCall("getMember", "getMember(address):(string)", [
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isRegisteredMember(_address: Address): boolean {
    let result = super.call(
      "isRegisteredMember",
      "isRegisteredMember(address):(bool)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBoolean();
  }

  try_isRegisteredMember(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegisteredMember",
      "isRegisteredMember(address):(bool)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUsernameTaken(_username: string): boolean {
    let result = super.call(
      "isUsernameTaken",
      "isUsernameTaken(string):(bool)",
      [ethereum.Value.fromString(_username)]
    );

    return result[0].toBoolean();
  }

  try_isUsernameTaken(_username: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUsernameTaken",
      "isUsernameTaken(string):(bool)",
      [ethereum.Value.fromString(_username)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RegisterMemberCall extends ethereum.Call {
  get inputs(): RegisterMemberCall__Inputs {
    return new RegisterMemberCall__Inputs(this);
  }

  get outputs(): RegisterMemberCall__Outputs {
    return new RegisterMemberCall__Outputs(this);
  }
}

export class RegisterMemberCall__Inputs {
  _call: RegisterMemberCall;

  constructor(call: RegisterMemberCall) {
    this._call = call;
  }

  get _username(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterMemberCall__Outputs {
  _call: RegisterMemberCall;

  constructor(call: RegisterMemberCall) {
    this._call = call;
  }
}

export class UnregisterMemberCall extends ethereum.Call {
  get inputs(): UnregisterMemberCall__Inputs {
    return new UnregisterMemberCall__Inputs(this);
  }

  get outputs(): UnregisterMemberCall__Outputs {
    return new UnregisterMemberCall__Outputs(this);
  }
}

export class UnregisterMemberCall__Inputs {
  _call: UnregisterMemberCall;

  constructor(call: UnregisterMemberCall) {
    this._call = call;
  }
}

export class UnregisterMemberCall__Outputs {
  _call: UnregisterMemberCall;

  constructor(call: UnregisterMemberCall) {
    this._call = call;
  }
}
