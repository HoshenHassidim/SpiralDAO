// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewProblem extends ethereum.Event {
  get params(): NewProblem__Params {
    return new NewProblem__Params(this);
  }
}

export class NewProblem__Params {
  _event: NewProblem;

  constructor(event: NewProblem) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ProblemCancelled extends ethereum.Event {
  get params(): ProblemCancelled__Params {
    return new ProblemCancelled__Params(this);
  }
}

export class ProblemCancelled__Params {
  _event: ProblemCancelled;

  constructor(event: ProblemCancelled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProblemChanged extends ethereum.Event {
  get params(): ProblemChanged__Params {
    return new ProblemChanged__Params(this);
  }
}

export class ProblemChanged__Params {
  _event: ProblemChanged;

  constructor(event: ProblemChanged) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ProblemRated extends ethereum.Event {
  get params(): ProblemRated__Params {
    return new ProblemRated__Params(this);
  }
}

export class ProblemRated__Params {
  _event: ProblemRated;

  constructor(event: ProblemRated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rater(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rating(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Problems__viewProblemDetailsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): boolean {
    return this.value5;
  }
}

export class Problems extends ethereum.SmartContract {
  static bind(address: Address): Problems {
    return new Problems("Problems", address);
  }

  doesProblemExist(_problemId: BigInt): boolean {
    let result = super.call(
      "doesProblemExist",
      "doesProblemExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );

    return result[0].toBoolean();
  }

  try_doesProblemExist(_problemId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesProblemExist",
      "doesProblemExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProblemCounter(): BigInt {
    let result = super.call(
      "getProblemCounter",
      "getProblemCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProblemCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProblemCounter",
      "getProblemCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProblemCreator(_problemId: BigInt): Address {
    let result = super.call(
      "getProblemCreator",
      "getProblemCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );

    return result[0].toAddress();
  }

  try_getProblemCreator(_problemId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProblemCreator",
      "getProblemCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isProblemNameTaken(_name: string): boolean {
    let result = super.call(
      "isProblemNameTaken",
      "isProblemNameTaken(string):(bool)",
      [ethereum.Value.fromString(_name)]
    );

    return result[0].toBoolean();
  }

  try_isProblemNameTaken(_name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProblemNameTaken",
      "isProblemNameTaken(string):(bool)",
      [ethereum.Value.fromString(_name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  meetsRatingCriteria(_problemId: BigInt): boolean {
    let result = super.call(
      "meetsRatingCriteria",
      "meetsRatingCriteria(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );

    return result[0].toBoolean();
  }

  try_meetsRatingCriteria(_problemId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "meetsRatingCriteria",
      "meetsRatingCriteria(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewMeetsRatingCriteria(_problemId: BigInt): boolean {
    let result = super.call(
      "viewMeetsRatingCriteria",
      "viewMeetsRatingCriteria(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );

    return result[0].toBoolean();
  }

  try_viewMeetsRatingCriteria(
    _problemId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "viewMeetsRatingCriteria",
      "viewMeetsRatingCriteria(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewProblemDetails(_problemId: BigInt): Problems__viewProblemDetailsResult {
    let result = super.call(
      "viewProblemDetails",
      "viewProblemDetails(uint256):(uint256,address,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );

    return new Problems__viewProblemDetailsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_viewProblemDetails(
    _problemId: BigInt
  ): ethereum.CallResult<Problems__viewProblemDetailsResult> {
    let result = super.tryCall(
      "viewProblemDetails",
      "viewProblemDetails(uint256):(uint256,address,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_problemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Problems__viewProblemDetailsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _membershipContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authorizationManagementContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelProblemCall extends ethereum.Call {
  get inputs(): CancelProblemCall__Inputs {
    return new CancelProblemCall__Inputs(this);
  }

  get outputs(): CancelProblemCall__Outputs {
    return new CancelProblemCall__Outputs(this);
  }
}

export class CancelProblemCall__Inputs {
  _call: CancelProblemCall;

  constructor(call: CancelProblemCall) {
    this._call = call;
  }

  get _problemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProblemCall__Outputs {
  _call: CancelProblemCall;

  constructor(call: CancelProblemCall) {
    this._call = call;
  }
}

export class ChangeProblemNameCall extends ethereum.Call {
  get inputs(): ChangeProblemNameCall__Inputs {
    return new ChangeProblemNameCall__Inputs(this);
  }

  get outputs(): ChangeProblemNameCall__Outputs {
    return new ChangeProblemNameCall__Outputs(this);
  }
}

export class ChangeProblemNameCall__Inputs {
  _call: ChangeProblemNameCall;

  constructor(call: ChangeProblemNameCall) {
    this._call = call;
  }

  get _problemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeProblemNameCall__Outputs {
  _call: ChangeProblemNameCall;

  constructor(call: ChangeProblemNameCall) {
    this._call = call;
  }
}

export class MeetsRatingCriteriaCall extends ethereum.Call {
  get inputs(): MeetsRatingCriteriaCall__Inputs {
    return new MeetsRatingCriteriaCall__Inputs(this);
  }

  get outputs(): MeetsRatingCriteriaCall__Outputs {
    return new MeetsRatingCriteriaCall__Outputs(this);
  }
}

export class MeetsRatingCriteriaCall__Inputs {
  _call: MeetsRatingCriteriaCall;

  constructor(call: MeetsRatingCriteriaCall) {
    this._call = call;
  }

  get _problemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MeetsRatingCriteriaCall__Outputs {
  _call: MeetsRatingCriteriaCall;

  constructor(call: MeetsRatingCriteriaCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RaiseProblemCall extends ethereum.Call {
  get inputs(): RaiseProblemCall__Inputs {
    return new RaiseProblemCall__Inputs(this);
  }

  get outputs(): RaiseProblemCall__Outputs {
    return new RaiseProblemCall__Outputs(this);
  }
}

export class RaiseProblemCall__Inputs {
  _call: RaiseProblemCall;

  constructor(call: RaiseProblemCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RaiseProblemCall__Outputs {
  _call: RaiseProblemCall;

  constructor(call: RaiseProblemCall) {
    this._call = call;
  }
}

export class RateProblemCall extends ethereum.Call {
  get inputs(): RateProblemCall__Inputs {
    return new RateProblemCall__Inputs(this);
  }

  get outputs(): RateProblemCall__Outputs {
    return new RateProblemCall__Outputs(this);
  }
}

export class RateProblemCall__Inputs {
  _call: RateProblemCall;

  constructor(call: RateProblemCall) {
    this._call = call;
  }

  get _problemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rating(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RateProblemCall__Outputs {
  _call: RateProblemCall;

  constructor(call: RateProblemCall) {
    this._call = call;
  }
}
